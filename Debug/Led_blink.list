
Led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a4  080003a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a4  080003a4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003a4  080003a4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a4  080003a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a4  080003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a8  080003a8  000103a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003ac  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000133a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000049f  00000000  00000000  0002136e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00021810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000188  00000000  00000000  000219e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e646  00000000  00000000  00021b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ef2  00000000  00000000  000401ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb4d2  00000000  00000000  000420a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fd572  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000570  00000000  00000000  000fd5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800038c 	.word	0x0800038c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800038c 	.word	0x0800038c

080001c8 <GPIO_Config>:
#include "main.h"


void GPIO_Config()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0


	RCC->AHB1ENR = 0x00000008;
 80001cc:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <GPIO_Config+0x30>)
 80001ce:	2208      	movs	r2, #8
 80001d0:	631a      	str	r2, [r3, #48]	; 0x30

	GPIOD->MODER = 0x55000000;
 80001d2:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <GPIO_Config+0x34>)
 80001d4:	f04f 42aa 	mov.w	r2, #1426063360	; 0x55000000
 80001d8:	601a      	str	r2, [r3, #0]
	GPIOD->OTYPER = 0x00000000;
 80001da:	4b08      	ldr	r3, [pc, #32]	; (80001fc <GPIO_Config+0x34>)
 80001dc:	2200      	movs	r2, #0
 80001de:	605a      	str	r2, [r3, #4]
	GPIOD->OSPEEDR = 0xFF000000;
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <GPIO_Config+0x34>)
 80001e2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80001e6:	609a      	str	r2, [r3, #8]
	GPIOD->PUPDR = 0x00000000;
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <GPIO_Config+0x34>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	60da      	str	r2, [r3, #12]

}
 80001ee:	bf00      	nop
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr
 80001f8:	40023800 	.word	0x40023800
 80001fc:	40020c00 	.word	0x40020c00

08000200 <delay>:

void delay(uint32_t time)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	while(time--);
 8000208:	bf00      	nop
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	1e5a      	subs	r2, r3, #1
 800020e:	607a      	str	r2, [r7, #4]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d1fa      	bne.n	800020a <delay+0xa>
}
 8000214:	bf00      	nop
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
	...

08000224 <main>:


int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0

	GPIO_Config();
 8000228:	f7ff ffce 	bl	80001c8 <GPIO_Config>
  while(1)
  {
	  GPIOD->ODR = 0x0000F000;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <main+0x24>)
 800022e:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000232:	615a      	str	r2, [r3, #20]
	  delay(100000);
 8000234:	4805      	ldr	r0, [pc, #20]	; (800024c <main+0x28>)
 8000236:	f7ff ffe3 	bl	8000200 <delay>
	  GPIOD->ODR = 0x00000000;
 800023a:	4b03      	ldr	r3, [pc, #12]	; (8000248 <main+0x24>)
 800023c:	2200      	movs	r2, #0
 800023e:	615a      	str	r2, [r3, #20]
	  delay(100000);
 8000240:	4802      	ldr	r0, [pc, #8]	; (800024c <main+0x28>)
 8000242:	f7ff ffdd 	bl	8000200 <delay>
	  GPIOD->ODR = 0x0000F000;
 8000246:	e7f1      	b.n	800022c <main+0x8>
 8000248:	40020c00 	.word	0x40020c00
 800024c:	000186a0 	.word	0x000186a0

08000250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000254:	e7fe      	b.n	8000254 <NMI_Handler+0x4>

08000256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000256:	b480      	push	{r7}
 8000258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800025a:	e7fe      	b.n	800025a <HardFault_Handler+0x4>

0800025c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000260:	e7fe      	b.n	8000260 <MemManage_Handler+0x4>

08000262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000266:	e7fe      	b.n	8000266 <BusFault_Handler+0x4>

08000268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800026c:	e7fe      	b.n	800026c <UsageFault_Handler+0x4>

0800026e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr

0800028a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800029c:	f000 f83e 	bl	800031c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <SystemInit+0x20>)
 80002aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ae:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <SystemInit+0x20>)
 80002b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80002c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000300 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002cc:	480d      	ldr	r0, [pc, #52]	; (8000304 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002ce:	490e      	ldr	r1, [pc, #56]	; (8000308 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002d0:	4a0e      	ldr	r2, [pc, #56]	; (800030c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d4:	e002      	b.n	80002dc <LoopCopyDataInit>

080002d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002da:	3304      	adds	r3, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e0:	d3f9      	bcc.n	80002d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e2:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002e4:	4c0b      	ldr	r4, [pc, #44]	; (8000314 <LoopFillZerobss+0x26>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e8:	e001      	b.n	80002ee <LoopFillZerobss>

080002ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ec:	3204      	adds	r2, #4

080002ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f0:	d3fb      	bcc.n	80002ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80002f2:	f7ff ffd7 	bl	80002a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002f6:	f000 f825 	bl	8000344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002fa:	f7ff ff93 	bl	8000224 <main>
  bx  lr    
 80002fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800030c:	080003ac 	.word	0x080003ac
  ldr r2, =_sbss
 8000310:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000314:	20000024 	.word	0x20000024

08000318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <HAL_IncTick+0x20>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <HAL_IncTick+0x24>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4413      	add	r3, r2
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <HAL_IncTick+0x24>)
 800032e:	6013      	str	r3, [r2, #0]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000000 	.word	0x20000000
 8000340:	20000020 	.word	0x20000020

08000344 <__libc_init_array>:
 8000344:	b570      	push	{r4, r5, r6, lr}
 8000346:	4d0d      	ldr	r5, [pc, #52]	; (800037c <__libc_init_array+0x38>)
 8000348:	4c0d      	ldr	r4, [pc, #52]	; (8000380 <__libc_init_array+0x3c>)
 800034a:	1b64      	subs	r4, r4, r5
 800034c:	10a4      	asrs	r4, r4, #2
 800034e:	2600      	movs	r6, #0
 8000350:	42a6      	cmp	r6, r4
 8000352:	d109      	bne.n	8000368 <__libc_init_array+0x24>
 8000354:	4d0b      	ldr	r5, [pc, #44]	; (8000384 <__libc_init_array+0x40>)
 8000356:	4c0c      	ldr	r4, [pc, #48]	; (8000388 <__libc_init_array+0x44>)
 8000358:	f000 f818 	bl	800038c <_init>
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	10a4      	asrs	r4, r4, #2
 8000360:	2600      	movs	r6, #0
 8000362:	42a6      	cmp	r6, r4
 8000364:	d105      	bne.n	8000372 <__libc_init_array+0x2e>
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f855 3b04 	ldr.w	r3, [r5], #4
 800036c:	4798      	blx	r3
 800036e:	3601      	adds	r6, #1
 8000370:	e7ee      	b.n	8000350 <__libc_init_array+0xc>
 8000372:	f855 3b04 	ldr.w	r3, [r5], #4
 8000376:	4798      	blx	r3
 8000378:	3601      	adds	r6, #1
 800037a:	e7f2      	b.n	8000362 <__libc_init_array+0x1e>
 800037c:	080003a4 	.word	0x080003a4
 8000380:	080003a4 	.word	0x080003a4
 8000384:	080003a4 	.word	0x080003a4
 8000388:	080003a8 	.word	0x080003a8

0800038c <_init>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr

08000398 <_fini>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr
